一、shell编程
1.要求
		复杂的脚本看懂大概，30%。简单的脚本会写！
		
2.shell编程怎么学
		①学习shell的语法和格式要求
		②使用shell的语法编写一个含有若干shell命令的脚本
		③使用shell命令解释器，执行shell脚本
3.shell是什么
	Linux操作系统的核心是kernal（内核）！
	当应用程序在执行时，需要调用计算机硬件的cpu,内存等资源！
	程序将指令发送给内核执行！
	为了防止程序发送一些恶意指令导致损坏内核，在内核和应用程序接口之间，设置一个中间层，称为shell!
	
	本质上来说：
		shell:   一个可以解释shell规定的语法命令的解释器！
						解释器负责将应用程序发送的指令，进行检查，合法后交给内核解释执行！返回结果！
						
		shell命令：  shell解释器要求的指定语法编写的命令！
		
		shell脚本：  多条shell命令，可以编写在一个文件中，文件中的指令，可以按照顺序执行！
						将这个文件称为shell脚本！
						
4.shell中的解释器
	 使用 $SHELL变量查看当前系统默认的解释器类型！
	 
	 shell支持多种不同风格的解释器，通过/etc/shells文件查看！
	 
	 默认使用 /bin/bash作为shell命令解释器！
	 
	 在终端中输入： cat /etc/shells
	 等价于/bin/bash -c 'cat /etc/shells'.
	 默认/bin/bash必须接一个脚本，作为输入！如果是一条命令，需要加-c （command）
	 
5. linux中的常用目录
/bin:     linux用户常用的命令
			cd 
			echo
			pwd
/sbin（super user bin）: root用户(管理员)使用的常用命令！
			对整个机器的管理命令！
			开启网络服务：  service network start
			
6.命令的执行
-bash: faefaw: command not found ： 当前命令不在当前用户的环境变量！

查看： echo $PATH

7.脚本的编写要求
①声明：  #!/bin/bash
②正文：  必须是shell解释器能否解释的命令

8.脚本的执行
	① bash /sh + 脚本
			特点： 新开一个bash执行脚本，一旦脚本执行完毕，bash自动关闭！
	② ./脚本，前提是当前用户对脚本有执行权限，使用当前默认的解释器执行脚本
			特点： 新开一个bash执行脚本，一旦脚本执行完毕，bash自动关闭！
    ③ source / .  +脚本  使用当前默认的解释器执行脚本，并不要求当前用户对脚本有执行权限
			特点： 在当前bash执行脚本
	
二、变量操作

增：  变量名=变量值

删：  unset 变量名

改：  变量名=变量值

查：  echo  $变量名
		查看当前bash所有定义的变量：  set
		

特殊关键字： 
		readonly : 用来修饰一个只读(不能修改，删除)变量！
		export:    导出！将一个变量提升为全局变量！
						局部变量： 默认变量只在定义变量的bash中有效！
									如果希望在bash-a访问bash-b中定义的变量！
										要求： ①bash-b不能关闭
											   ②让bash-b将变量提升为全局变量，才能访问到！
											   
注意： ①变量赋值时，值全部以字符串存在，无法进行运算！
		②赋值的值中有空格，需要使用引号引起来
			单引号： 不能识别$等特殊字符,不能脱义
			双引号：  可以脱义$
		③``,作用是将引号中的命令执行的结果赋值给变量
			`命令` 等价于 $(命令)

											   
对象0X1234 B{String name="jack"}
对象A｛
	B b=0X1234
	void hello(){
		sysout(B.name)
	}

｝
		
变量的生命周期：
		在第一次新增时产生
		变量在执行unset时，撤销，失效！
		关闭当前bash，所有定义的变量也不会存在！


sh 跟bash的区别，实际上是bash有没开启POSIX模式的区别。

简单说，sh是bash的一种特殊的模式，sh就是开启了POSIX标准的bash， /bin/sh 相当于 /bin/bash --posix。

SSH 目标机器登录之后 属于login-shell 会自动读取/etc/profile 下的配置
SSH 目标机器直接跟命令 属于 no-login-shell 不会读取此配置

















						
		